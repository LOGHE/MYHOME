//位运算
public class BitOperator {
	//编写一个main方法
	public static void main(String[]args) {
		//2&3 = ?
		//2的原码为 00000000 00000000 00000000 00000010
		//3的原码为 00000000 00000000 00000000 00000011
		//2的补码等于原码 3也一样
		//按位&(两个全为1结果为1 否则为0)
		//二  00000000 00000000 00000000 00000010
		//三  00000000 00000000 00000000 00000011
		//操作 00000000 00000000 00000000 00000010 &运算后的补码
		//根据三码合一 &后的原码同上 结果为2
		System.out.println(2&3);//2
		
		//~-2 = ?
		//-2的原码为10000000 00000000 00000000 00000010
		//   反码为原码除第一个表正负的不反后面全部反 11111111  11111111 111111111 11111101
		//补码为反码+1   1111111  11111111 111111111 11111110
		//取反运算后为    0(表示正数)0000000 00000000 00000000 00000001 (运算后的补码)
		//因为取反后为正数 三码合一 运算后的原码为00000000 00000000 00000000 00000001 结果等于1
		System.out.println(~-2);//1
		
		//~2=？
		//按位取反
		//因为所有操作都是根据补码来运行的	1先的到2 的补码，2 是正数“三码合一”原码 反码 补码一样
		//2的原码为int四个字节32个bit 为00000000 00000000 00000000 00000010		
		//2的补码为00000000 00000000 00000000 00000010
		//取反操作后 ~2 = 11111111 11111111 11111111 11111101(补码)
		//11111111 11111111 11111111 11111100(反码)
		//10000000 00000000 00000000 00000011(原码 = -3)
		System.out.println(~2);//-3
		
		//2|3 =?
		//正数2的原码三码合一 00000000 00000000 00000000 00000010
		//3的原码 00000000 00000000 00000000 00000011
		//按位或操作后(两个有一个为1或两个都为1则为1,否则为0)
		//00000000 00000000 00000000 00000011
		System.out.println(2|3);//3
		
		//2^3 =?
		//2的原码等于补码三码合一 00000000 00000000 00000000 00000010
		//3的原码 00000000 00000000 00000000 00000011
		//按位异或操作(两个一个为0一个为1结果为1,否则两个相同数字结果为0
		//运算后结果为00000000 00000000 00000000 00000001 因为是正数补码等于原码 结果为1
		System.out.println(2^3);//1
		}
	}