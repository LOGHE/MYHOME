/**
 * 
 */
package exercise;

/**
 * @author 罗寿合(ラ　ジュゴウ)
 *
 */
public class ErjinzhiWeiyunsuan0_1 {
	public static void main(String[] args) {
		//计算在一个 32 位的整数的二进制表示中有多少个 1。
		//制造一个无限循环 num != 0 然后让num 和 (num-1) 进行与运算 & 
		//与运算的规律就是每次让num的二进制中含有的1 依次变为零 有多少一个1 就循环&运算多少次
		//此时来一个记录运算次数的cnt 就代表有多少一个1
		//5 的二进制 0101 和 4的二进制0100与运算 
		//循环1   
		//0101 	&
		//0100 = 0100 (1次循环相当于有一个1)
		//0100 &
		//0011 = 0000 (2次循环 相当于有两个1)
		int num = 5;
		int num2 = 5;
		int cnt = 0;
		int num1 = 0;
		while (num != 0) {
			num = num & (num - 1);
			cnt++;
		}
		System.out.println(cnt);
		
		//如何求出有多少个 0 
		//把num和1进行与运算 然后重新赋值
		//最后再进行位运算 向右位移1位
		//0101 &
		//0001  = 0001 不等于0 num1 不加
		//执行算术右移1位
		//0010 &
		//0001 = 0 结果为 0 num1++
		//执行算术右移1位
		//0001 &
		//0001 = 0001  结果不等于0 num1不++
		//算术右移1为 = 0000 跳出循环 
		
//		while (num2 != 0) {//相当于每个二进制都被比较了 因为是算术位移
//			if ((num2 & 1) == 0) {//判断是否为0 则num1++
//				num1++;
//			}
//			num2 >>= 1;//算术右移1位 
//		}
//		System.out.println(num1);
	}
}
